# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dsBAQig4Wv-boXt1mrh4jRsu343Pr0hG
"""

import streamlit as st
from tensorflow.keras.models import Sequential, model_from_json
import numpy as np
from tensorflow.keras.preprocessing import image
from PIL import UnidentifiedImageError
from PIL import Image
import tensorflow as tf

# json_file = open('catanddog.json', 'r')
# loaded_model_json = json_file.read()
# json_file.close()
# loaded_model = model_from_json(loaded_model_json)

loaded_model = tf.keras.models.load_model('catanddog.h5')
st.title('Cats and Dogs Classification Using CNN')
st.write('This CNN image classification model was created on Python, and trained on Xception. It boasts an accuracy of approximately 98%.')
st.write('It is also my school project.')
    # Insert a line or divider
st.markdown("---")

st.write('Try some examples')

# Load your Bird images (replace these paths with your actual file paths)
image_paths = ["cat.png", "dog.png", "flower.png"]  # Example paths
num_classes = ['Cat', 'Dog']  # Class names

# Function to resize the image (for display purposes only)
def resize_image(image_path, width, height):
    try:  # Handle potential image opening errors
        image = Image.open(image_path)
        resized_image = image.resize((width, height))
        return resized_image
    except Exception as e:
        st.error(f"Error opening image {image_path}: {e}")
        return None  # Return None if image opening fails

image_width = 400
image_height = 400

# Use st.columns to create columns
columns = st.columns(len(image_paths))

# Mapping of image indices to results (you might not need this)
results = {}

# Display each image in a column with a "Detect" button underneath
for idx, (column, image_path) in enumerate(zip(columns, image_paths)):
    resized_image = resize_image(image_path, image_width, image_height)

    if resized_image:  # Only proceed if image was opened successfully
        column.image(resized_image, use_column_width=True)

        if column.button(f"Predict"):
            with st.spinner(f"Predicting image..."):
                try:
                    loaded_single_image = tf.keras.utils.load_img(
                        image_path,  # Use image_path directly
                        color_mode='rgb',
                        target_size=(224, 224)
                    )

                    test_image = tf.keras.utils.img_to_array(loaded_single_image)
                    test_image /= 255
                    test_image = np.expand_dims(test_image, axis=0)

                    logits = loaded_model(test_image)
                    softmax = tf.nn.softmax(logits)

                    predict_output = tf.argmax(logits, -1).numpy()
                    predicted_class = num_classes[predict_output[0]]  # Use num_classes
                    probability = softmax.numpy()[0][predict_output[0]] * 100

                    column.write(f"**Prediction:** {predicted_class}")  # Bold prediction
                    column.write(f"**Probability:** {probability:.4f}%")  # Bold probability

                except Exception as e:
                    column.error(f"An error occurred during prediction: {e}")
st.markdown("---")
st.write('Have your own images?')
num_classes = ['Cat','Dog']

genre = st.radio(
    "How You Want To Upload Your Image",
    ('Browse Photos', 'Camera'))


if genre == 'Camera':
    ImagePath = st.camera_input("Take a picture")
else:
    ImagePath = st.file_uploader("Choose a file")

if ImagePath is not None:

    try:
        image_ = Image.open(ImagePath)

        st.image(image_, width=250)

    except UnidentifiedImageError:
        st.write('Input Valid File Format !!!  [ jpeg, jpg, png only this format is supported ! ]')


try:
    if st.button('Predict'):
        loaded_single_image = tf.keras.utils.load_img(ImagePath,
                                              color_mode='rgb',
                                              target_size=(224, 224)) #edit to model input size
        
        test_image = tf.keras.utils.img_to_array(loaded_single_image)
        test_image /= 255

        test_image = np.expand_dims(test_image, axis=0)

        

        logits = loaded_model(test_image)
        
        softmax = tf.nn.softmax(logits)

        predict_output = tf.argmax(logits, -1).numpy()
        classes = ['Cat','Dog']
        st.header(classes[predict_output[0]])

        predicted_class = classes[predict_output[0]]
        
        # Get the probability of the predicted class
        probability = softmax.numpy()[0][predict_output[0]] * 100
        # probability = predict_output[0][predicted_class_index] * 100 
        st.header(f"Probability of a {predicted_class}: {probability:.4f}%")
        

except TypeError:
    st.header('Please Upload Your File !!!')

except UnidentifiedImageError:
    st.header('Input Valid File !!!')

