# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mXrogxn8tfIXdGnD_5hw487j-Y74O7PD
"""

import streamlit as st
from tensorflow.keras.models import Sequential, model_from_json
import numpy as np
from tensorflow.keras.preprocessing import image
from PIL import UnidentifiedImageError
from PIL import Image
import tensorflow as tf

loaded_model = tf.keras.models.load_model('catanddog.h5')

st.title('Cats and Dogs Classification Using CNN')

num_classes = ['Cat','Dog']

genre = st.radio(
    "How You Want To Upload Your Image",
    ('Browse Photos', 'Camera'))

if genre == 'Camera':
    ImagePath = st.camera_input("Take a picture")
else:
    ImagePath = st.file_uploader("Choose a file")

# example_images = {
#     "Cat": "cat.png",  # Replace with actual paths
#     "Dog": "dog.png",  # Replace with actual paths
#     "Flower": "flower.png",  # Replace with actual path
# }

# st.write("Some Try Examples:")  # Text before the buttons

# cols = st.columns(len(example_images))  # Create columns for horizontal layout

# for i, (image_name, image_path) in enumerate(example_images.items()):
#     with cols[i]:  # Place each button in its own column
#         if st.button(image_name):
#             ImagePath = image_path  # Store the selected image path

# st.markdown("---")  # Add a horizontal line


if ImagePath is not None:

    try:
        image_ = Image.open(ImagePath)

        st.image(image_, width=250)

    except UnidentifiedImageError:
        st.write('Input Valid File Format !!!  [ jpeg, jpg, png only this format is supported ! ]')


try:
    if st.button('Predict'):
        test_image = tf.keras.utils.load_img(ImagePath,
                                              color_mode='rgb',
                                              target_size=(224, 224)) #edit to model input size

        test_image = tf.keras.utils.img_to_array(test_image)

        test_image = np.expand_dims(test_image, axis=0)



        logits = loaded_model(test_image)

        softmax = tf.nn.softmax(logits)

        predict_output = tf.argmax(logits, -1).numpy()
        classes = ['cat','dog']
        st.header(classes[predict_output[0]])

        predicted_class = classes[predict_output[0]]
        # Get the probability of the predicted class
        probability = softmax.numpy()[0][predict_output[0]]
        st.header(f"Probability of {predicted_class}: {probability:.4f}")


except TypeError:
    st.header('Please Upload Your File !!!')

except UnidentifiedImageError:
    st.header('Input Valid File !!!')
