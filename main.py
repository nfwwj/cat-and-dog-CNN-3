# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dsBAQig4Wv-boXt1mrh4jRsu343Pr0hG
"""

import streamlit as st
import tensorflow as tf
from tensorflow.keras.models import Sequential, model_from_json
import numpy as np
from tensorflow.keras.preprocessing import image
from PIL import UnidentifiedImageError
from PIL import Image

# json_file = open('catanddog.json', 'r')
# loaded_model_json = json_file.read()
# json_file.close()
# loaded_model = model_from_json(loaded_model_json)

# loaded_model.load_weights("catanddog.h5")
# print("Loaded model from disk")
loaded_model = tf.keras.models.load_model('catanddog.h5')

st.title('Cats and Dogs Classification Using CNN')

# Initialize ImagePath in session state
if "ImagePath" not in st.session_state:
    st.session_state.ImagePath = None

genre = st.radio("How You Want To Upload Your Image", ('Browse Photos', 'Camera'))

if genre == 'Camera':
    st.session_state.ImagePath = st.camera_input("Take a picture")  # Store in session state
elif genre == 'Browse Photos':
    st.session_state.ImagePath = st.file_uploader("Choose a file")  # Store in session state

example_images = {
    "Cat": "cat.png",  # Replace with actual paths
    "Dog": "dog.png",  # Replace with actual paths
    "Flower": "flower.png",  # Replace with actual path
}

st.write("Some Try Examples:")

for image_name, image_path in example_images.items():
    if st.button(image_name):
        st.session_state.ImagePath = image_path  # Store in session state
        ImagePath = image_path

if st.button('Predict'):
    if st.session_state.ImagePath is not None:  # Check session state
        try:
            loaded_single_image = tf.keras.utils.load_img(
                st.session_state.ImagePath, color_mode='rgb', target_size=(224, 224)
            )
            test_image = tf.keras.utils.img_to_array(loaded_single_image)
            test_image /= 255

            test_image = np.expand_dims(test_image, axis=0)

            logits = loaded_model(test_image)
            softmax = tf.nn.softmax(logits)

            predict_output = tf.argmax(logits, -1).numpy()
            classes = ['Cat', 'Dog']
            st.header(classes[predict_output[0]])

            predicted_class = classes[predict_output[0]]
            probability = softmax.numpy()[0][predict_output[0]] * 100
            st.header(f"Probability of a {predicted_class}: {probability:.4f}%")

        except (TypeError, UnidentifiedImageError):
            st.header('Input Valid File Format !!! [ jpeg, jpg, png only this format is supported ! ]')
        except Exception as e:
            st.error(f"An error occurred during prediction: {e}")
    else:
        st.header('Please Upload Your File or select an example!!!')
