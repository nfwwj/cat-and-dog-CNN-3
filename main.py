# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dsBAQig4Wv-boXt1mrh4jRsu343Pr0hG
"""

import streamlit as st
import tensorflow as tf
from tensorflow.keras.models import Sequential, model_from_json
import numpy as np
from tensorflow.keras.preprocessing import image
from PIL import UnidentifiedImageError
from PIL import Image

# json_file = open('catanddog.json', 'r')
# loaded_model_json = json_file.read()
# json_file.close()
# loaded_model = model_from_json(loaded_model_json)

# loaded_model.load_weights("catanddog.h5")
# print("Loaded model from disk")
loaded_model = tf.keras.models.load_model('catanddog.h5')

st.title('Cats and Dogs Classification Using CNN')

genre = st.radio("How You Want To Upload Your Image",('Browse Photos', 'Camera'))

if genre == 'Camera':
    ImagePath = st.camera_input("Take a picture")
else:
    ImagePath = st.file_uploader("Choose a file")

# Dictionary to store example image paths
example_images = {
    "Cat": "cat.png",  # Replace with actual paths
    "Dog": "dog.png",  # Replace with actual paths
    "Flower": "flower.png",  # Replace with actual path
}

# Store the selected image path in session state
if "selected_image_path" not in st.session_state:
    st.session_state.selected_image_path = None

def predict_image(image_path):
    try:
        loaded_single_image = tf.keras.utils.load_img(
            image_path, color_mode='rgb', target_size=(224, 224)
        )
        test_image = tf.keras.utils.img_to_array(loaded_single_image)
        test_image /= 255.0  # Normalize

        test_image = np.expand_dims(test_image, axis=0)

        logits = loaded_model(test_image)
        softmax = tf.nn.softmax(logits)

        predict_output = tf.argmax(logits, -1).numpy()
        predicted_class = classes[predict_output[0]]
        probability = softmax.numpy()[0][predict_output[0]] * 100

        return predicted_class, probability
    except Exception as e:
        st.error(f"An error occurred during prediction: {e}")
        return None, None


for image_name, image_path in example_images.items():
    try:
        img = Image.open(image_path)

        # The key is to use st.image as a button and store the path in session state
        if st.image(img, width=250, caption=image_name, use_column_width=False, key=image_name): #Added key to image to make it unique
            st.session_state.selected_image_path = image_path #Store the path in the session state.

            predicted_class, probability = predict_image(image_path) #Perform prediction here.
            if predicted_class and probability:
                st.header(f"Prediction: {predicted_class}")
                st.header(f"Probability: {probability:.4f}%")

# ImagePath = st.file_uploader("Choose a file")

if ImagePath is not None:

    try:
        image_ = Image.open(ImagePath)

        st.image(image_, width=250)

    except UnidentifiedImageError:
        st.write('Input Valid File Format !!!  [ jpeg, jpg, png only this format is supported ! ]')


try:
    if st.button('Predict'):
        loaded_single_image = tf.keras.utils.load_img(ImagePath,
                                              color_mode='rgb',
                                              target_size=(224, 224)) #edit to model input size
        
        test_image = tf.keras.utils.img_to_array(loaded_single_image)
        test_image /= 255

        test_image = np.expand_dims(test_image, axis=0)

        

        logits = loaded_model(test_image)
        
        softmax = tf.nn.softmax(logits)

        predict_output = tf.argmax(logits, -1).numpy()
        classes = ['Cat','Dog']
        st.header(classes[predict_output[0]])

        predicted_class = classes[predict_output[0]]
        
        # Get the probability of the predicted class
        probability = softmax.numpy()[0][predict_output[0]] * 100
        # probability = predict_output[0][predicted_class_index] * 100 
        st.header(f"Probability of a {predicted_class}: {probability:.4f}%")
        

except TypeError:
    st.header('Please Upload Your File !!!')

except UnidentifiedImageError:
    st.header('Input Valid File !!!')

